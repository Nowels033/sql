/*Procedimientos SIN*/
-- 1. Escribe un procedimiento que no tenga ningún parámetro de 
-- entrada ni de salida y que muestre el texto ¡Hola mundo!.

drop procedure hola;
create procedure hola()
begin
	SELECT "¡Hola mundo!";
end;

call hola();

-- 2. Escribe un procedimiento que reciba un número real de 
-- entrada y muestre un mensaje indicando si el número es 
-- positivo, negativo o cero.

drop procedure num_real;
create procedure num_real(num REAL)
begin
	if (num > 0) then
		SELECT "Positivo";
	elseif (num < 0) then
		SELECT "Negativo";
	else
		SELECT "Cero";
	end if;
end;

call num_real(-9);

-- 3. Modifique el procedimiento diseñado en el ejercicio anterior 
-- para que tenga un parámetro de entrada, con el valor un número 
-- real, y un parámetro de salida, con una cadena de caracteres 
-- indicando si el número es positivo, negativo o cero.

drop procedure if exists num_real2;
create procedure num_real2(in num REAL, out tipo varchar(20))
begin
	if (num > 0) then
		set tipo = "Positivo";
	elseif (num < 0) then
		set tipo = "Negativo";
	else
		set tipo = "Cero";
	end if;
end;

call num_real2(0, @tipo);
SELECT @tipo;


-- 4. Escribe un procedimiento que reciba un número real de 
-- entrada, que representa el valor de la nota de un alumno, 
-- y muestre un mensaje indicando qué nota ha obtenido teniendo 
-- en cuenta las siguientes condiciones:
--    [0,5) = Insuficiente
--    [5,6) = Aprobado
--    [6, 7) = Bien
--    [7, 9) = Notable
--    [9, 10] = Sobresaliente
--    En cualquier otro caso la nota no será válida.

drop procedure if exists notas;
create procedure notas(nota REAL)
begin
	case
	when (nota >= 0 && nota < 5) then
		SELECT "Insuficiente";
	when (nota >= 5 && nota < 6) then
		SELECT "Aprobado";
	when (nota >= 6 && nota < 7) then
		SELECT "Bien";
	when (nota >= 7 && nota < 9) then
		SELECT "Notable";
	when (nota >= 9 && nota <= 10) then
		SELECT "Sobresaliente";
	when (nota > 10 || nota < 0) then
		SELECT "NO VALIDO";
	end case;
end;

call notas(12);

-- 5. Modifique el procedimiento diseñado en el ejercicio anterior 
-- para que tenga un parámetro de entrada, con el valor de la nota 
-- en formato numérico y un parámetro de salida, con una cadena de 
-- texto indicando la nota correspondiente.

drop procedure if exists notas2_if;
create procedure notas2_if(in nota REAL, out valor varchar(20))
begin
	if (nota >= 0 && nota < 5) then
		set valor = "Insuficiente";
	elseif (nota >= 5 && nota < 6) then
		set valor = "Aprobado";
	elseif (nota >= 6 && nota < 7) then
		set valor = "Bien";
	elseif (nota >= 7 && nota < 9) then
		set valor = "Notable";
	elseif (nota >= 9 && nota <= 10) then
		set valor = "Sobresaliente";
	elseif (nota > 10 || nota < 0) then
		set valor = "NO VALIDO";
	end if;
end;

call notas2_if(4.7, @valor);
SELECT @valor;

-- 6. Resuelva el procedimiento diseñado en el ejercicio anterior 
-- haciendo uso de la estructura de control CASE.

drop procedure if exists notas2;
create procedure notas2(in nota REAL, out valor varchar(20))
begin
	case
	when (nota >= 0 && nota < 5) then
		set valor = "Insuficiente";
	when (nota >= 5 && nota < 6) then
		set valor = "Aprobado";
	when (nota >= 6 && nota < 7) then
		set valor = "Bien";
	when (nota >= 7 && nota < 9) then
		set valor = "Notable";
	when (nota >= 9 && nota <= 10) then
		set valor = "Sobresaliente";
	when (nota > 10 || nota < 0) then
		set valor = "NO VALIDO";
	end case;
end;

call notas2(4.7, @valor);
SELECT @valor;

-- 7. Escribe un procedimiento que reciba como parámetro de 
-- entrada un valor numérico que represente un día de la semana 
-- y que devuelva una cadena de caracteres con el nombre del día 
-- de la semana correspondiente. Por ejemplo, para el valor de 
-- entrada 1 debería devolver la cadena lunes.

drop procedure if exists dia_semana;
create procedure dia_semana(dia INT)
begin
	case
	when (dia = 1) then SELECT "lunes";
	when (dia = 2) then SELECT "martes";
	when (dia = 3) then SELECT "miercoles";
	when (dia = 4) then SELECT "jueves";
	when (dia = 5) then SELECT "viernes";
	when (dia = 6) then SELECT "sabado";
	when (dia = 7) then SELECT "domingo";
	when (dia < 1 || dia > 7) then SELECT "NO VALIDO";
	end case;
end;

call dia_semana(6);


/*Procedimientos CON*/
-- 1. Escribe un procedimiento que reciba el nombre de un país 
-- como parámetro de entrada y realice una consulta sobre la tabla 
-- cliente para obtener todos los clientes que existen en la tabla 
-- de ese país.

drop procedure if exists pais;
create procedure pais(pais varchar(20))
begin
	SELECT c.nombre_cliente 
	FROM cliente c
	WHERE c.pais = pais;
end;

call pais("Spain");

-- 2. Escribe un procedimiento que reciba como parámetro de entrada 
-- una forma de pago, que será una cadena de caracteres (Ejemplo: 
-- PayPal, Transferencia, etc). Y devuelva como salida el pago de 
-- máximo valor realizado para esa forma de pago. Deberá hacer uso 
-- de la tabla pago de la base de datos jardineria.

drop procedure if exists pago;
create procedure pago(in forma_pago varchar(30), out max_pago int)
begin
	SELECT MAX(p.total) into max_pago
	FROM pago p
	WHERE p.forma_pago = forma_pago;
end;

call pago("PayPal", @max_pago);
SELECT @max_pago;

-- 3. Escribe un procedimiento que reciba como parámetro de entrada 
-- una forma de pago, que será una cadena de caracteres (Ejemplo: 
-- PayPal, Transferencia, etc). Y devuelva como salida los 
-- siguientes valores teniendo en cuenta la forma de pago 
-- seleccionada como parámetro de entrada:

--    el pago de máximo valor,
--    el pago de mínimo valor,
--    el valor medio de los pagos realizados,
--    la suma de todos los pagos,
--    el número de pagos realizados para esa forma de pago.

drop procedure if exists pago2;
create procedure pago2(in forma_pago varchar(30), out max_pago int,
						out min_pago int, out avg_pago int,
						out sum_pago int, out count_pago int)
begin
	SELECT MAX(p.total) into max_pago FROM pago p 
	WHERE p.forma_pago = forma_pago;
	SELECT MIN(p.total) into min_pago FROM pago p 
	WHERE p.forma_pago = forma_pago;
	SELECT AVG(p.total) into avg_pago FROM pago p 
	WHERE p.forma_pago = forma_pago;
	SELECT SUM(p.total) into sum_pago FROM pago p 
	WHERE p.forma_pago = forma_pago;
	SELECT COUNT(p.total) into count_pago FROM pago p 
	WHERE p.forma_pago = forma_pago;
end;

call pago2("Cheque", @max_pago, @min_pago, @avg_pago, @sum_pago,
					@count_pago);
SELECT @max_pago;
SELECT @min_pago;
SELECT @avg_pago;
SELECT @sum_pago;
SELECT @count_pago;

/*-----*/

-- 4. Crea una base de datos llamada procedimientos que contenga una 
-- tabla llamada cuadrados. La tabla cuadrados debe tener dos 
-- columnas de tipo INT UNSIGNED, una columna llamada número y 
-- otra columna llamada cuadrado.

DROP DATABASE IF EXISTS Procedimientos;
CREATE DATABASE Procedimientos;
USE Procedimientos;

CREATE TABLE cuadros (
    numero INT UNSIGNED,
    cuadrado INT UNSIGNED
);

-- Una vez creada la base de datos y la tabla deberá crear un 
-- procedimiento llamado calcular_cuadrados con las siguientes 
-- características. El procedimiento recibe un parámetro de entrada 
-- llamado tope de tipo INT UNSIGNED y calculará el valor de los 
-- cuadrados de los primeros números naturales hasta el valor 
-- introducido como parámetro. El valor del números y de sus 
-- cuadrados deberán ser almacenados en la tabla cuadrados que 
-- hemos creado previamente.
-- Tenga en cuenta que el procedimiento deberá eliminar el 
-- contenido actual de la tabla antes de insertar los nuevos valores de los cuadrados que va a calcular.

-- Utilice un bucle WHILE para resolver el procedimiento.

drop procedure if exists calcular_cuadrados;
create procedure calcular_cuadrados(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM cuadros;
	while (i <= tope) DO
		INSERT INTO  cuadros VALUES (i, i*i);
		SET i = i+1;
	end while;
end;

call calcular_cuadrados(2);

-- 5. Utilice un bucle REPEAT para resolver el procedimiento del 
-- ejercicio anterior.

drop procedure if exists calcular_cuadrados_REPEAT;
create procedure calcular_cuadrados_REPEAT(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM cuadros;
	REPEAT
		INSERT INTO  cuadros VALUES (i, i*i);
		SET i = i+1;
	UNTIL (i > tope)
	END REPEAT;
end;

call calcular_cuadrados_REPEAT(6);

-- 6. Utilice un bucle LOOP para resolver el procedimiento del 
-- ejercicio anterior.

drop procedure if exists calcular_cuadrados_LOOP;
create procedure calcular_cuadrados_LOOP(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM cuadros;
	ins_loop: LOOP
		IF (i > tope) THEN
			LEAVE ins_loop;
		END IF;
		INSERT INTO  cuadros VALUES (i, i*i);
		SET i = i+1;
	END LOOP;
end;

call calcular_cuadrados_LOOP(7);

-- 7. Crea una base de datos llamada procedimientos que contenga una 
-- tabla llamada ejercicio. La tabla debe tener una única columna 
-- llamada número y el tipo de dato de esta columna debe ser INT 
-- UNSIGNED.
-- Una vez creada la base de datos y la tabla deberá crear un 
-- procedimiento llamado calcular_números con las siguientes 
-- características. El procedimiento recibe un parámetro de 
-- entrada llamado valor_inicial de tipo INT UNSIGNED y 
-- deberá almacenar en la tabla ejercicio toda la secuencia 
-- de números desde el valor inicial pasado como entrada hasta 
-- el 1.

-- Tenga en cuenta que el procedimiento deberá eliminar el contenido 
-- actual de las tablas antes de insertar los nuevos valores.

-- Utilice un bucle WHILE para resolver el procedimiento.

CREATE TABLE ejercicio (
    numero INT UNSIGNED
);

drop procedure if exists calcular_numeros;
create procedure calcular_numeros(valor_inicial INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT valor_inicial;
	DELETE FROM ejercicio;
	while (i >= 1) DO
		INSERT INTO  ejercicio VALUES (i);
		SET i = i - 1;
	end while;
end;

call calcular_numeros(8);

-- 8.Utilice un bucle REPEAT para resolver el procedimiento del 
-- ejercicio anterior.

drop procedure if exists calcular_numeros_REPEAT;
create procedure calcular_numeros_REPEAT(valor_inicial INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT valor_inicial;
	DELETE FROM ejercicio;
	REPEAT
		INSERT INTO  ejercicio VALUES (i);
		SET i = i - 1;
	UNTIL (i < 1)
	END REPEAT;
end;

call calcular_numeros_REPEAT(15);

-- 9.Utilice un bucle LOOP para resolver el procedimiento del 
-- ejercicio anterior.

drop procedure if exists calcular_numeros_LOOP;
create procedure calcular_numeros_LOOP(valor_inicial INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT valor_inicial;
	DELETE FROM ejercicio;
	ins_loop: LOOP
		IF (i < 1) THEN
			LEAVE ins_loop;
		END IF;
		INSERT INTO  ejercicio VALUES (i);
		SET i = i - 1;
	END LOOP;
end;

call calcular_numeros_LOOP(20);

-- 10. Crea una base de datos llamada procedimientos que contenga
-- una tabla llamada pares y otra tabla llamada impares. Las dos 
-- tablas deben tener única columna llamada número y el tipo de 
-- dato de esta columna debe ser INT UNSIGNED.

CREATE TABLE pares (
    numero INT UNSIGNED
);

CREATE TABLE impares (
    numero INT UNSIGNED
);

-- Una vez creada la base de datos y las tablas deberá crear un 
-- procedimiento llamado calcular_pares_impares con las 
-- siguientes características. El procedimiento recibe un 
-- parámetro de entrada llamado tope de tipo INT UNSIGNED y 
-- deberá almacenar en la tabla pares aquellos números pares 
-- que existan entre el número 1 el valor introducido como 
-- parámetro. Habrá que realizar la misma operación para 
-- almacenar los números impares en la tabla impares.

-- Tenga en cuenta que el procedimiento deberá eliminar el 
-- contenido actual de las tablas antes de insertar los nuevos 
-- valores.

-- Utilice un bucle WHILE para resolver el procedimiento.

drop procedure if exists calcular_pares_impares;
create procedure calcular_pares_impares(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM pares;
	DELETE FROM impares;
	while (i <= tope) DO
		IF(i%2 = 0) THEN
			INSERT INTO  pares VALUES (i);
		ELSE
			INSERT INTO  impares VALUES (i);
		END IF;
		SET i = i + 1;
	end while;
end;

call calcular_pares_impares(10);

-- 11. Utilice un bucle REPEAT para resolver el procedimiento 
-- del ejercicio anterior.

drop procedure if exists calcular_pares_impares_REPEAT;
create procedure calcular_pares_impares_REPEAT(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM pares;
	DELETE FROM impares;
	REPEAT
		IF(i%2 = 0) THEN
			INSERT INTO  pares VALUES (i);
		ELSE
			INSERT INTO  impares VALUES (i);
		END IF;
		SET i = i + 1;
	UNTIL (i > tope)
	END REPEAT;
end;

call calcular_pares_impares_REPEAT(20);

-- 12. Utilice un bucle LOOP para resolver el procedimiento del 
-- ejercicio anterior.

drop procedure if exists calcular_pares_impares_LOOP;
create procedure calcular_pares_impares_LOOP(tope INT UNSIGNED)
begin
	DECLARE i INTEGER DEFAULT 1;
	DELETE FROM pares;
	DELETE FROM impares;
	ins_loop: LOOP
		IF(i > tope) THEN
			LEAVE ins_loop;
		END IF;
		IF(i%2 = 0) THEN
			INSERT INTO  pares VALUES (i);
		ELSE
			INSERT INTO  impares VALUES (i);
		END IF;
		SET i = i + 1;
	END LOOP;
end;

call calcular_pares_impares_LOOP(30);



/*Funciones SIN*/
-- 1. Escribe una función que reciba un número entero de entrada 
-- y devuelva TRUE si el número es par o FALSE en caso contrario.

DROP FUNCTION IF EXISTS es_par
CREATE FUNCTION es_par(numero INT)
  RETURNS boolean -- lo que devuelve
BEGIN
	IF(numero%2 = 0)THEN
  		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;

SELECT es_par(15);

-- 2. Escribe una función que devuelva el valor de la hipotenusa 
-- de un triángulo a partir de los valores de sus lados.

DROP FUNCTION IF EXISTS hipotenusa
CREATE FUNCTION hipotenusa(cateto1 INT, cateto2 INT)
  RETURNS INT -- lo que devuelve
BEGIN
	RETURN SQRT((cateto1*cateto1) + (cateto2*cateto2));
END;

SELECT hipotenusa(3, 4);

-- 3. Escribe una función que reciba como parámetro de entrada un 
-- valor numérico que represente un día de la semana y que 
-- devuelva una cadena de caracteres con el nombre del día de la 
-- semana correspondiente. Por ejemplo, para el valor de entrada 
-- 1 debería devolver la cadena lunes.

DROP FUNCTION IF EXISTS dia_semana
CREATE FUNCTION dia_semana(dia INT)
  RETURNS VARCHAR(15) -- lo que devuelve
BEGIN
	CASE
		WHEN (dia = 1) THEN RETURN "lunes";
		WHEN (dia = 2) THEN RETURN "martes";
		WHEN (dia = 3) THEN RETURN "miercoles";
		WHEN (dia = 4) THEN RETURN "jueves";
		WHEN (dia = 5) THEN RETURN "viernes";
		WHEN (dia = 6) THEN RETURN "sabado";
		WHEN (dia = 7) THEN RETURN "domingo";
		WHEN (dia < 1 || dia > 7) THEN RETURN "NO VALIDO";
	END CASE;
END;

SELECT dia_semana(7);

-- 4. Escribe una función que reciba tres números reales como 
-- parámetros de entrada y devuelva el mayor de los tres.

DROP FUNCTION IF EXISTS num_mayor
CREATE FUNCTION num_mayor(num1 REAL, num2 REAL, num3 REAL)
  RETURNS REAL  -- lo que devuelve
BEGIN
	IF(num1 > num2 && num1 > num3) THEN
		RETURN num1;
	ELSEIF(num2 > num1 && num2 > num3) THEN
		RETURN num2;
	ELSE
		RETURN num3;
	END IF;
END;

SELECT num_mayor(7, 8.2,5.63);

-- 5. Escribe una función que devuelva el valor del área de un 
-- círculo a partir del valor del radio que se recibirá como 
-- parámetro de entrada.

DROP FUNCTION IF EXISTS area_circulo
CREATE FUNCTION area_circulo(radio FLOAT)
  RETURNS FLOAT  -- lo que devuelve
BEGIN
	DECLARE pi FLOAT;
	set pi = 3.1415;
	RETURN (pi * (radio * radio));
	-- también se puede usar directamente la constante PI
	-- RETURN (PI()*(radio*radio));
END;
					
SELECT area_circulo(2.1);

-- 6. Escribe una función que devuelva como salida el número de 
-- años que han transcurrido entre dos fechas que se reciben como 
-- parámetros de entrada. Por ejemplo, si pasamos como parámetros 
-- de entrada las fechas 2018-01-01 y 2008-01-01 la función tiene 
-- que devolver que han pasado 10 años.
-- Para realizar esta función puede hacer uso de las siguientes 
-- funciones que nos proporciona MySQL:
-- 		DATEDIFF
-- 		TRUNCATE

DROP FUNCTION IF EXISTS diferenciaEntreFechas
CREATE FUNCTION diferenciaEntreFechas(fecha1 DATE, fecha2 DATE)
  RETURNS INT  -- lo que devuelve
BEGIN
	DECLARE anyos INT;
	SET anyos = DATEDIFF(fecha1,fecha2)/365;
	RETURN TRUNCATE(anyos,1);
END;
	
SELECT diferenciaEntreFechas('2018-01-01', '2008-01-01');

-- 7. Escribe una función que reciba una cadena de entrada y 
-- devuelva la misma cadena pero sin acentos. La función tendrá 
-- que reemplazar todas las vocales que tengan acento por la 
-- misma vocal pero sin acento. Por ejemplo, si la función recibe 
-- como parámetro de entrada la cadena María la función debe 
-- devolver la cadena Maria.

DROP FUNCTION IF EXISTS sinAcentos;
CREATE FUNCTION sinAcentos(cad VARCHAR(20))
RETURNS VARCHAR(20)
BEGIN

    set @textvalue = cad;

    -- ACCENTS
    SET @withaccents = 'ŠšŽžÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝŸÞàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿþƒ';
    SET @withoutaccents = 'SsZzAAAAAAACEEEEIIIINOOOOOOUUUUYYBaaaaaaaceeeeiiiinoooooouuuuyybf';
    SET @COUNT = LENGTH(@withaccents);

    WHILE (@count > 0) do
        SET @textvalue = REPLACE(@textvalue, SUBSTRING(@withaccents, @COUNT, 1), SUBSTRING(@withoutaccents, @COUNT, 1));
        SET @COUNT = @COUNT - 1;
    END WHILE;

    return @textvalue;
END;

SELECT sinAcentos('María Pérez');

/*OTRA MANERA*/

DROP FUNCTION IF EXISTS sinAcentos_2;
CREATE FUNCTION sinAcentos_2(cad VARCHAR(20))
RETURNS VARCHAR(20)
BEGIN
	DECLARE string VARCHAR(100);
	SET string = cad;
	SET string = LOWER(string);
	SET string = replace(string, 'á', 'a');
	SET string = replace(string, 'é', 'e');
	SET string = replace(string, 'í', 'i');
	SET string = replace(string, 'ó', 'o');
	SET string = replace(string, 'ú', 'u');
	RETURN string;
END;

SELECT sinAcentos_2('María Pérez');


/*Funciones CON*/
USE tienda;
-- 1. Escribe una función para la base de datos tienda que 
-- devuelva el número total de productos que hay en la tabla 
-- productos.

DROP FUNCTION IF EXISTS total_productos
CREATE FUNCTION total_productos()
  RETURNS INT UNSIGNED -- lo que devuelve
BEGIN
	DECLARE total INT UNSIGNED;
	SET total = (
	    SELECT COUNT(*)
	    FROM producto);
   RETURN total;
END;

SELECT total_productos();

-- 2. Escribe una función para la base de datos tienda que 
-- devuelva el valor medio del precio de los productos de un 
-- determinado fabricante que se recibirá como parámetro de 
-- entrada. El parámetro de entrada será el nombre del fabricante.

DROP FUNCTION IF EXISTS valor_medio
CREATE FUNCTION valor_medio(fabricante VARCHAR(50))
  RETURNS REAL UNSIGNED -- lo que devuelve
BEGIN
	DECLARE media REAL UNSIGNED;
	SET media = (
	    SELECT AVG(p.precio)
	    FROM producto p, fabricante f 
	    WHERE p.codigo_fabricante = f.codigo 
	   		  AND f.nombre = fabricante);
   RETURN media;
END;

SELECT valor_medio('Lenovo');

-- 3. Escribe una función para la base de datos tienda que 
-- devuelva el valor máximo del precio de los productos de un 
-- determinado fabricante que se recibirá como parámetro de 
-- entrada. El parámetro de entrada será el nombre del fabricante.

DROP FUNCTION IF EXISTS precio_maximo
CREATE FUNCTION precio_maximo(fabricante VARCHAR(50))
  RETURNS REAL -- lo que devuelve
BEGIN
	DECLARE max REAL;
	SET max = (
	    SELECT MAX(p.precio)
	    FROM producto p, fabricante f 
	    WHERE p.codigo_fabricante = f.codigo 
	   		  AND f.nombre = fabricante);
   RETURN max;
END;

SELECT precio_maximo('Asus');

-- 4. Escribe una función para la base de datos tienda que 
-- devuelva el valor mínimo del precio de los productos de un 
-- determinado fabricante que se recibirá como parámetro de 
-- entrada. El parámetro de entrada será el nombre del fabricante

DROP FUNCTION IF EXISTS precio_minimo
CREATE FUNCTION precio_minimo(fabricante VARCHAR(50))
  RETURNS REAL -- lo que devuelve
BEGIN
	DECLARE min REAL;
	SET min = (
	    SELECT min(p.precio)
	    FROM producto p, fabricante f 
	    WHERE p.codigo_fabricante = f.codigo 
	   		  AND f.nombre = fabricante);
   RETURN min;
END;

SELECT precio_minimo('Asus');


*/HANDLER*/

-- Crea una base de datos llamada test que contenga una tabla 
-- llamada alumno. La tabla debe tener cuatro columnas:
-- 	id: entero sin signo (clave primaria).
-- 	nombre: cadena de 50 caracteres.
-- 	apellido1: cadena de 50 caracteres.
-- 	apellido2: cadena de 50 caracteres.

CREATE TABLE alumno (
    id INT UNSIGNED,
    nombre VARCHAR(50),
    apellido1 VARCHAR(50),
    apellido2 VARCHAR(50),
    PRIMARY KEY(id)
);

-- Una vez creada la base de datos y la tabla deberá crear un 
-- procedimiento llamado insertar_alumno con las siguientes 
-- características. El procedimiento recibe cuatro parámetros de 
-- entrada (id, nombre, apellido1, apellido2) y los insertará en 
-- la tabla alumno. El procedimiento devolverá como salida un 
-- parámetro llamado error que tendrá un valor igual a 0 si la 
-- operación se ha podido realizar con éxito y un valor igual a 
-- 1 en caso contrario.
-- Deberá manejar los errores que puedan ocurrir cuando se intenta
-- insertar una fila que contiene una clave primaria repetida.

drop procedure if exists insertar_alumno;
create procedure insertar_alumno(id INT UNSIGNED, nombre VARCHAR(50),
    apellido1 VARCHAR(50), apellido2 VARCHAR(50))
BEGIN
	DECLARE error INT; /* TAMBIÉN SE PUEDE HACER DECLARANDOLO COMO OUT*/
	DECLARE EXIT HANDLER FOR SQLSTATE '23000'
	BEGIN
		SET error = 1;
		SELECT error;
	END;
	INSERT INTO  alumno VALUES (id, nombre, apellido1, apellido2);
	SET error = 0;
	SELECT error;
END;

call insertar_alumno(1, 'María', 'Lozano', 'Ledesma');


/*TRANSACIONES*/
-- Crea una base de datos llamada cine que contenga dos tablas 
-- con las siguientes columnas.

DROP DATABASE IF EXISTS cine;
CREATE DATABASE cine;
USE cine;

-- Tabla cuentas:
-- 	id_cuenta: entero sin signo (clave primaria).
-- 	saldo: real sin signo.

CREATE TABLE cuentas (
    id_cuenta INT UNSIGNED,
    saldo REAL UNSIGNED,
    PRIMARY KEY(id_cuenta)
);

-- Tabla entradas:
-- 	id_butaca: entero sin signo (clave primaria).
-- 	nif: cadena de 9 caracteres.

CREATE TABLE entradas (
    id_butaca INT UNSIGNED,
    nif VARCHAR(9),
    PRIMARY KEY(id_butaca)
);

-- Una vez creada la base de datos y las tablas deberá crear un 
-- procedimiento llamado comprar_entrada con las siguientes 
-- características. El procedimiento recibe 3 parámetros de entrada 
-- (nif, id_cuenta, id_butaca) y devolverá como salida un parámetro 
-- llamado error que tendrá un valor igual a 0 si la compra de la 
-- entrada se ha podido realizar con éxito y un valor igual a 1 en 
-- caso contrario.

-- El procedimiento de compra realiza los siguientes pasos:
-- 	Inicia una transacción.
-- 	Actualiza la columna saldo de la tabla cuentas cobrando 5 euros 
-- 	a la cuenta con el id_cuenta adecuado.
-- 	Inserta una fila en la tabla entradas indicando la butaca 
-- 	(id_butaca) que acaba de comprar el usuario (nif).
-- 	Comprueba si ha ocurrido algún error en las operaciones 
-- 	anteriores. Si no ocurre ningún error entonces aplica un COMMIT 
-- 	a la transacción y si ha ocurrido algún error aplica un ROLLBACK.
-- Deberá manejar los siguientes errores que puedan ocurrir durante 
-- el proceso.
-- ERROR 1264 (Out of range value)
-- ERROR 1062 (Duplicate entry for PRIMARY KEY)

-- ¿Qué ocurre cuando intentamos comprar una entrada y le pasamos 
-- como parámetro un número de cuenta que no existe en la tabla 
-- cuentas? ¿Ocurre algún error o podemos comprar la entrada?

-- En caso de que exista algún error, ¿cómo podríamos resolverlo?.

drop procedure if exists comprar_entrada;
create procedure comprar_entrada(nif VARCHAR(9), 
								id_cuenta INT UNSIGNED,
								id_butaca INT UNSIGNED)
BEGIN
	DECLARE error INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION, SQLWARNING
	BEGIN
      	SET error = 1;
		SELECT error;
      	ROLLBACK;
    END;
	/*DECLARE EXIT HANDLER FOR SQLSTATE '1264'
	BEGIN
		SET error = 1;
		SELECT error;
		ROLLBACK;
	END;
	DECLARE EXIT HANDLER FOR SQLSTATE '1062'
	BEGIN
		SET error = 1;
		SELECT error;
		ROLLBACK;
	END;*/
    -- transacción
    START TRANSACTION;
   		SET error = 0;
		UPDATE cuentas c SET c.saldo = c.saldo - 5 
		WHERE c.id_cuenta = id_cuenta;
		INSERT INTO entradas VALUES (id_butaca, nif);
		SELECT error;
	COMMIT;
END;

/*iniciar cuentas*/
INSERT INTO cuentas VALUES (1,50);
INSERT INTO cuentas VALUES (2,5);

/*llamada a funcion*/
call comprar_entrada('73026258Q', 1, 2);
call comprar_entrada('73024558Q', 2, 3);


/*CURSORES*/

-- 1. Escribe las sentencias SQL necesarias para crear una base de 
-- datos llamada test, una tabla llamada alumnos y 4 sentencias de 
-- inserción para inicializar la tabla. La tabla alumnos está 
-- formada por las siguientes columnas:
-- 		id (entero sin signo y clave primaria)
-- 		nombre (cadena de caracteres)
-- 		apellido1 (cadena de caracteres)
-- 		apellido2 (cadena de caracteres
-- 		fecha_nacimiento (fecha)
USE test

DROP TABLE IF EXISTS alumnos;
CREATE TABLE alumnos(
    id INT UNSIGNED,
    nombre VARCHAR(50),
    apellido1 VARCHAR(50),
    apellido2 VARCHAR(50),
    fecha_nacimiento DATE,
    PRIMARY KEY(id)
);

INSERT INTO alumnos VALUES (1, 'María', 'Lozano', 'Ledesma', '2000-02-12');
INSERT INTO alumnos VALUES (2, 'Kit', 'Sebastian', 'Connor', '2004-03-08');

-- Una vez creada la tabla se decide añadir una nueva columna a la 
-- tabla llamada edad que será un valor calculado a partir de la 
-- columna fecha_nacimiento. Escriba la sentencia SQL necesaria para
-- modificar la tabla y añadir la nueva columna.

ALTER TABLE alumnos ADD edad INT;

-- Escriba una función llamada calcular_edad que reciba una fecha y 
-- devuelva el número de años que han pasado desde la fecha actual 
-- hasta la fecha pasada como parámetro:
-- 		Función: calcular_edad
-- 		Entrada: Fecha
-- 		Salida: Número de años (entero)

DROP FUNCTION IF EXISTS calcular_edad;
CREATE FUNCTION calcular_edad(fecha DATE)
  RETURNS INT -- lo que devuelve
BEGIN
	RETURN TRUNCATE(DATEDIFF(CURRENT_DATE(),fecha)/365,1);
END;

-- Prueba
SELECT calcular_edad('2000-02-12');

-- Ahora escriba un procedimiento que permita calcular la edad de 
-- todos los alumnmos que ya existen en la tabla. Para esto será 
-- necesario crear un procedimiento llamado actualizar_columna_edad 
-- que calcule la edad de cada alumno y actualice la tabla. Este 
-- procedimiento hará uso de la función calcular_edad que hemos 
-- creado en el paso anterior.

DROP PROCEDURE IF EXISTS actualizar_columna_edad
CREATE PROCEDURE actualizar_columna_edad()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE i_fecha DATE;
  DECLARE aux_id INT;
  DECLARE cur1 CURSOR FOR SELECT id, fecha_nacimiento FROM alumnos;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur1;

  read_loop: LOOP
    FETCH cur1 INTO aux_id, i_fecha;
    IF done THEN
      LEAVE read_loop;
    END IF;
   	UPDATE alumnos SET edad = calcular_edad(i_fecha)
   	WHERE aux_id = id;
  END LOOP;
  CLOSE cur1;
END;

CALL actualizar_columna_edad();


-- Modifica la tabla alumnos del ejercicio anterior para añadir una
-- nueva columna email. Una vez que hemos modificado la tabla 
-- necesitamos asignarle una dirección de correo electrónico de 
-- forma automática.

ALTER TABLE alumnos ADD email VARCHAR(30);

-- Escriba un procedimiento llamado crear_email que dados los 
-- parámetros de entrada: nombre, apellido1, apellido2 y dominio, 
-- cree una dirección de email y la devuelva como salida.

-- Procedimiento: crear_email
-- Entrada:
-- 		nombre (cadena de caracteres)
-- 		apellido1 (cadena de caracteres)
-- 		apellido2 (cadena de caracteres)
-- 		dominio (cadena de caracteres)
-- Salida:
-- 		email (cadena de caracteres)

-- devuelva una dirección de correo electrónico con el siguiente 
-- formato:

-- 	El primer carácter del parámetro nombre.
-- 	Los tres primeros caracteres del parámetro apellido1.
-- 	Los tres primeros caracteres del parámetro apellido2.
-- 	El carácter @.
-- 	El dominio pasado como parámetro.

DROP PROCEDURE IF EXISTS crear_email;
CREATE PROCEDURE crear_email(in nombre VARCHAR(50),
							in apellido1 VARCHAR(50),
							in apellido2 VARCHAR(50),
							in dominio VARCHAR(20),
							out email VARCHAR(30))
BEGIN 
	SET email = CONCAT(LEFT(nombre,1),LEFT(apellido1,3),
						LEFT(apellido2,3),"@", dominio);
END;

-- prueba
CALL crear_email('María', 'Lozano', 'Ledesma', 'gmail.joe', @email);
SELECT @email;

-- Ahora escriba un procedimiento que permita crear un email para 
-- todos los alumnmos que ya existen en la tabla. Para esto será 
-- necesario crear un procedimiento llamado actualizar_columna_email
-- que actualice la columna email de la tabla alumnos. 
-- Este procedimiento hará uso del procedimiento crear_email que 
-- hemos creado en el paso anterior.

DROP PROCEDURE IF EXISTS actualizar_columna_email;
CREATE PROCEDURE actualizar_columna_email()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE i_nombre, i_apell1, i_apell2 VARCHAR(50);
  DECLARE aux_id INT;
  DECLARE dominio VARCHAR(20) DEFAULT "gmail.com";
  DECLARE direccion_email VARCHAR(30);
  DECLARE cur1 CURSOR FOR SELECT id, nombre, apellido1, apellido2 
 			FROM alumnos;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur1;

  read_loop: LOOP
    FETCH cur1 INTO aux_id, i_nombre, i_apell1, i_apell2;
    IF done THEN
      LEAVE read_loop;
    END IF;
    CALL crear_email(i_nombre, i_apell1, i_apell2, dominio, direccion_email);
   	UPDATE alumnos SET alumnos.email = direccion_email
   	WHERE aux_id = id;				/* se puede pasar con o sin @*/
  END LOOP;
  CLOSE cur1;
END;

CALL actualizar_columna_email();

-- Escribe un procedimiento llamado crear_lista_emails_alumnos que 
-- devuelva la lista de emails de la tabla alumnos separados por un 
-- punto y coma. 
-- Ejemplo: juan@iescelia.org;maria@iescelia.org;
-- 			pepe@iescelia.org;lucia@iescelia.org.

DROP PROCEDURE IF EXISTS crear_lista_emails_alumnos;
CREATE PROCEDURE crear_lista_emails_alumnos()
BEGIN
	DECLARE done INT DEFAULT FALSE;
  	DECLARE i_email VARCHAR(30);
  	DECLARE lista VARCHAR(1000) DEFAULT "";
	DECLARE cur1 CURSOR FOR SELECT email FROM alumnos;	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  	OPEN cur1;

  	read_loop: LOOP
	    FETCH cur1 INTO i_email; 
	    IF done THEN
	      LEAVE read_loop;
	    END IF;
	   	SET lista = CONCAT(lista, i_email, ";");
	END LOOP;
	/* para quitar el ; del final*/
	SET lista = SUBSTRING(lista, 1, LENGTH(lista)-1); 
  	CLOSE cur1;
  	SELECT lista;
END;

CALL crear_lista_emails_alumnos();